class Solution:
    """

    Write a function that takes an unsigned integer and returns
    the number of '1' bits (also known as the Hamming weight).

    Approach:
        This implementation uses Python's built-in `bin()` function to convert
        the integer to its binary string representation and then counts the
        occurrences of the character `'1'`.

    Time Complexity:
        O(k), where k is the number of bits in the binary representation of `n`.
        For a 32-bit integer, this simplifies to O(1).

    Space Complexity:
        O(k), due to storing the binary string generated by `bin(n)`.
        For a 32-bit integer, this is also effectively O(1).
    """

    def hammingWeight(self, n: int) -> int:
        """
        Return the number of '1' bits (the Hamming weight) in a 32-bit unsigned integer.

        Args:
            n (int): A 32-bit unsigned integer.

        Returns:
            int: The count of '1' bits in the binary representation of `n`.

        Example:
            >>> s = Solution()
            >>> s.hammingWeight(0b00000000000000000000000000001011)
            3
            >>> s.hammingWeight(0b11111111111111111111111111111101)
            31
        """
        n_string = bin(n)[2:]      # Convert integer to binary string (remove '0b' prefix)
        return n_string.count("1")


if __name__ == "__main__":
    # Example usage
    s = Solution()

    # Example input: 11 (binary 1011)
    n = 0b00000000000000000000000000001011
    print("Input (binary):  ", format(n, "032b"))
    print("Hamming Weight:  ", s.hammingWeight(n))

    # Another test
    n = 0b11111111111111111111111111111101
    print("\nInput (binary):  ", format(n, "032b"))
    print("Hamming Weight:  ", s.hammingWeight(n))
